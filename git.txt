初始化仓库
git init

向暂存区添加文件或目录
git add 文件名或目录

将暂存区内容上传到版本库
git commit 文件名 -m '版本库说明'
git commit (将整个暂存区提交到版本库)

查看版本记录
git log
以一行内容显示版本记录
git log -pretty=oneline

查看操作记录
git reflog

版本回退
git reset --hard HEAD(HEAD指当前版本，HEAD^指上一个版本)
git reset -- hard 版本序号(可以通过查看记录获得)

撤销修改
直接丢弃工作区的改动
git restore 文件名
已加到暂存区但未commit的
先git reset HEAD 文件名
再git restore 文件名

对比文件的不同
对比工作区和版本库的某个文件
git diff HEAD -- 文件(命令行中HEAD指版本库，--是指工作区,输出中--是工作区，++是版本库)
对比两个版本中的文件
git diff HEAD HEAD^ 文件名(输出中--是指左边的版本，++是指右边的版本)

删除文件
工作区中删除
rm 文件名
缓存区中删除
git rm 文件名
版本库中删除
git commit


分支操作
创建新的分支
git branch 分支名
创建并将HEAD移动到新的分支
git checkout -b 分支名
将HEAD移动到其他分支
git checkout 分支名
合并分支（先回到master分支)
git merge 要被合并的分支名(不发生冲突时默认是快速合并)
删除分支
git branch -d 分支名

分支冲突
当主分支和另一个要被合并的分支的同一文件都被修改过的情况下合并时会发生分支冲突
发生冲突后可以用git status查看是哪个文件发生冲突，再用vim打开冲突文件手动修改保存退出，再add和commit就可以解决冲突
当主分支和另一个要被合并的分支的不同文件被修改的情况下不会发生分支冲突，但也不会用快速合并，而是会自动帮你进行一次新的提交（要手动输入提交信息）

禁止快速合并
在可以使用快速合并的场合也可以选择禁用快速合并
git merge --no-ff -m '提交的版本信息'  要被合并的分支名
禁用快速合并后会进行一次新的提交

处理bug分支
先使用git stash保存现场
切换回master分支再创建一个修复bug分支
在修复bug分支中修复bug，再回到master
为了使得修复bug得到一个记录使用禁用快速合并进行合并
再回到原本的分支使用git stash list列出保存的工作现场
最后使用git stash pop恢复现场

